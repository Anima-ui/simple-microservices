services:
  user-service:
    build:
      context: ./userservice
      dockerfile: Dockerfile
    image: userservice
    container_name: user-service
    ports:
      - "8080:8080"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017
    depends_on:
      - mongo
    networks:
      - backend

  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    networks:
      - backend

  mongo_express:
    image: mongo-express
    container_name: mongo_express
    ports:
      - "9999:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_EXPRESS_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongo
    depends_on:
      - mongo
    networks:
      - backend

  order-service:
    build:
      context: ./orderservice
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_USERNAME}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_PRODUCER_KEY-SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE-SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
    depends_on:
      - postgres
      - user-service
      - kafka
    networks:
      - backend

  postgres:
    image: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin/
    depends_on:
      - postgres
      - postgres_storehouse
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend


  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend


  notification:
    build:
      context: ./notificationservice
      dockerfile: Dockerfile
    image: notification-service
    container_name: notification-service
    ports:
      - "8083:8083"
    networks:
      - backend
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_CONSUMER_KEY-SERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_KAFKA_CONSUMER_VALUE-SERIALIZER: org.apache.kafka.common.serialization.StringDeserializer
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: ${SENDER_EMAIL}
      SPRING_MAIL_PASSWORD: ${SENDER_PASSWORD}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT: 5000
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT: 5000
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOUT: 5000
      SENDER_NAME: ${SENDER_NAME}
      SENDER_EMAIL: ${SENDER_EMAIL}
    depends_on:
      - kafka
      - order-service

  postgres_storehouse: 
    image: postgres
    container_name: postgres_storehouse
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME_STOREHOUSE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_STOREHOUSE}
    volumes:
      - pgdata-storehouse:/var/lib/postgresql/data
    networks:
      - backend

  storehouse:
    image: storehouse
    container_name: storehouse
    build:
      context: ./storehouse
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_storehouse:5432/${POSTGRES_USERNAME_STOREHOUSE}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USERNAME_STOREHOUSE}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD_STOREHOUSE}
    networks:
      - backend
    depends_on:
      - postgres_storehouse



volumes:
  pgdata: {}
  pgadmin-data: {}
  mongo: {}
  pgdata-storehouse: {}

networks:
  backend:
    driver: bridge